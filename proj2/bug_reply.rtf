{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;
\red153\green168\blue186;\red133\green96\blue154;\red86\green132\blue173;\red109\green109\blue109;\red152\green182\blue28;
\red173\green169\blue32;\red81\green136\blue67;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c59608\c71373\c10980;
\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c31765\c53333\c26275;}
\margl1440\margr1440\vieww16060\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
\
\
boolean \cf4 isUnblockedMove\cf5 (Square from\cf2 , \cf5 Square to\cf2 , \cf5 Square asEmpty) \{\
    \cf2 if \cf5 (get(to) == \cf2 null \cf5 || !from.isQueenMove(to) || get(asEmpty) == 
\f1\i \cf6 \cb3 SPEAR
\f0\i0 \cf5 \cb3 ) \{\
        \cf2 return false;\
    \cf5 \}\
\
    \cf2 int \cf5 direction = from.direction(to)\cf2 ;\
\
    int \cf5 steps = \cf7 0\cf2 ;\
    if \cf5 (from.col() == to.col()) \{\
        steps = Math.
\f1\i \cf5 \cb3 abs
\f0\i0 \cf5 \cb3 (from.row() - to.row())\cf2 ;\
    \cf5 \}\
    \cf2 else if \cf5 (from.row() == to.row()) \{\
        steps = Math.
\f1\i \cf5 \cb3 abs
\f0\i0 \cf5 \cb3 (from.col() - to.col())\cf2 ;\
    \cf5 \}\
    \cf2 else \cf5 \{\
        \cf2 int \cf5 dx = Math.
\f1\i \cf5 \cb3 abs
\f0\i0 \cf5 \cb3 (from.col() - to.col())\cf2 ;\
        int \cf5 dy = Math.
\f1\i \cf5 \cb3 abs
\f0\i0 \cf5 \cb3 (from.row() - to.row())\cf2 ;\
        \cf5 steps = Math.
\f1\i \cf5 \cb3 min
\f0\i0 \cf5 \cb3 (dx\cf2 , \cf5 dy)\cf2 ;\
    \cf5 \}\
\
    \cf2 for \cf5 (\cf2 int \cf5 i = \cf7 1\cf2 ; \cf5 i <= steps\cf2 ; \cf5 i++) \{\
        Square visitor = from.queenMove(direction\cf2 , \cf5 i)\cf2 ;\
\
        if \cf5 (get(visitor) != 
\f1\i \cf6 \cb3 EMPTY 
\f0\i0 \cf5 \cb3 && !visitor.equals(asEmpty)) \{\
            \cf2 return false;\
        \cf5 \} \cf2 else if \cf5 (visitor == to) \{\
            \cf2 return true;\
        \cf5 \}\
    \}\
    \cf2 return true;\
\cf5 \}\
\cf2 \
\
REACHABLE FROM:\
\
private void \cf4 toNext\cf5 () \{\
\
\
            \cf6 _steps\cf5 ++\cf2 ;\
\
            \cf6 _next \cf5 = \cf6 _from\cf5 .queenMove(\cf6 _dir\cf2 , \cf6 _steps\cf5 )\cf2 ;\
\
            while \cf5 (!isUnblockedMove(\cf6 _from\cf2 , \cf6 _next\cf2 , \cf6 _asEmpty\cf5 ) && hasNext()) \{\
                \cf6 _dir\cf5 ++\cf2 ;\
                \cf6 _steps \cf5 = \cf7 1\cf2 ;\
\
                if \cf5 (!hasNext()) \{\
                    \cf2 break;\
                \cf5 \}\
\
\cf8 //                if (_next == null || !hasNext()) \{\
//                    break;\
//                \}\
                \cf6 _next \cf5 = \cf6 _from\cf5 .queenMove(\cf6 _dir\cf2 , \cf6 _steps\cf5 )\cf2 ;\
            \cf5 \}\
        \}\
\
\

\f2 \cf5 \cb3   
\f0 \cf4 \cb3 LegalMoveIterator\cf5 (Piece side) \{\
\
            \cf6 _fromPiece \cf5 = side\cf2 ;\
            \cf6 _startingSquares \cf5 = Square.
\f1\i \cf5 \cb3 iterator
\f0\i0 \cf5 \cb3 ()\cf2 ;\
            \cf6 _start \cf5 = \cf6 _startingSquares\cf5 .next()\cf2 ;\
\cf8 //            _pieceMoves = reachableFrom(_start, _start); //
\f1\i \cf9 \cb3 fixme was null dbug\

\f0\i0 \cf8 \cb3 //            _nextSquare = _pieceMoves.next();\
//            _spearThrows = reachableFrom(_nextSquare, _start);\
            \cf6 _pieceMoves \cf5 = 
\f1\i \cf6 \cb3 NO_SQUARES
\f0\i0 \cf2 \cb3 ;\
            \cf6 _spearThrows \cf5 = 
\f1\i \cf6 \cb3 NO_SQUARES
\f0\i0 \cf2 \cb3 ;\
            \cf8 //_nextSquare = _pieceMoves.next();\
\
            \cf5 toNext()\cf2 ;\
        \cf5 \}\
\
        \cf10 \cb3 @Override\
        \cf2 \cb3 public boolean \cf4 hasNext\cf5 () \{\
\cf8 //            if (_nextSquare == null) \{\
//                return false;\
//            \}\
//            return _startingSquares.hasNext();\
            \cf2 return \cf6 _spearThrows\cf5 .hasNext()\cf2 ;\
        \cf5 \}\
\
        \cf10 \cb3 @Override\
        \cf2 \cb3 public \cf5 Move \cf4 next\cf5 () \{\
\
            Move last = Move.
\f1\i \cf5 \cb3 mv
\f0\i0 \cf5 \cb3 (\cf6 _start\cf2 , \cf6 _nextSquare\cf2 , \cf6 _spear\cf5 )\cf2 ;\
\
            \cf5 toNext()\cf2 ;\
\
            return \cf5 last\cf2 ;\
        \cf5 \}\
\
        
\f1\i \cf11 \cb3 /**\
         * Advance so that the next valid Move is\
         * _start-_nextSquare(sp), where sp is the next value of\
         * _spearThrows.\
         */\
        
\f0\i0 \cf2 \cb3 private void \cf4 toNext\cf5 () \{\
            \cf2 while \cf5 (get(\cf6 _start\cf5 ) == \cf6 _fromPiece \cf5 && \cf6 _startingSquares\cf5 .hasNext()) \{\
                \cf2 if\cf5 (\cf6 _spearThrows\cf5 .hasNext()) \{\
                    \cf6 _spear \cf5 = \cf6 _spearThrows\cf5 .next()\cf2 ;\
                    break;\
                \cf5 \}\
                \cf2 else if \cf5 (\cf6 _pieceMoves\cf5 .hasNext()) \{\
                    \cf6 _nextSquare \cf5 = \cf6 _pieceMoves\cf5 .next()\cf2 ;\
                    \cf6 _spearThrows \cf5 = reachableFrom(\cf6 _nextSquare\cf2 , \cf6 _start\cf5 )\cf2 ;\
                \cf5 \}\
                \cf2 else if \cf5 (\cf6 _startingSquares\cf5 .hasNext()) \{\
                    \cf6 _start \cf5 = \cf6 _startingSquares\cf5 .next()\cf2 ;\
\
                    if \cf5 (get(\cf6 _start\cf5 ) == \cf6 _fromPiece\cf5 ) \{\
                        \cf6 _pieceMoves \cf5 = reachableFrom(\cf6 _start\cf2 , \cf6 _start\cf5 )\cf2 ;\
                    \cf5 \}\
                \}\
\cf8 //            if (get(_start) == _fromPiece && _startingSquares.hasNext()) \{\
//\
//                if (_spearThrows.hasNext()) \{\
//                    _spear = _spearThrows.next();\
//\
//                \} else if (_pieceMoves.hasNext()) \{\
//                    _nextSquare = _pieceMoves.next();\
//                    _spearThrows = reachableFrom(_nextSquare, _start);\
//                    toNext();\
//\
//                \} else if (_startingSquares.hasNext()) \{\
//\
//                    _start = _startingSquares.next();\
//\
//                    _pieceMoves = reachableFrom(_start, _start); //
\f1\i \cf9 \cb3 fixme was null dbug\

\f0\i0 \cf8 \cb3 //\
//                    _nextSquare = _pieceMoves.next();\
//\
//                    _spearThrows = reachableFrom(_nextSquare, _start);\
//                    toNext();\
//                \}\
//            \}\
//            else if (_startingSquares.hasNext()) \{\
//\
//                _start = _startingSquares.next();\
//                _pieceMoves = reachableFrom(_start, _start); //
\f1\i \cf9 \cb3 fixme was null dbug\

\f0\i0 \cf8 \cb3 //                _nextSquare = _pieceMoves.next();\
//                _spearThrows = reachableFrom(_nextSquare, _start);\
//\
//                toNext();\
//            \}\
            \cf5 \}\
        \}\
\
ERROR CODE:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 Amazons 61B, version 1.0\
> auto white\
Exception in thread "main" java.lang.NullPointerException\
	at amazons.AI.myMove(AI.java:40)\
	at amazons.Controller.play(Controller.java:51)\
* null\
	at amazons.Main.main(Main.java:48)\
\
Process finished with exit code 1}